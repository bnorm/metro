

package dev.zacsweers.metro.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link dev.zacsweers.metro.compiler.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler-tests/src/test/data/box")
@TestDataPath("$PROJECT_ROOT")
public class BoxTestGenerated extends AbstractBoxTest {
  @Test
  public void testAllFilesPresentInBox() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/aggregation")
  @TestDataPath("$PROJECT_ROOT")
  public class Aggregation {
    @Test
    public void testAllFilesPresentInAggregation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/aggregation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("ContributesBindingWithGenericBoundType.kt")
    public void testContributesBindingWithGenericBoundType() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesBindingWithGenericBoundType.kt");
    }

    @Test
    @TestMetadata("ContributesBindingWithGenericQualifiedBoundTypeFromAnotherModule.kt")
    public void testContributesBindingWithGenericQualifiedBoundTypeFromAnotherModule() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesBindingWithGenericQualifiedBoundTypeFromAnotherModule.kt");
    }

    @Test
    @TestMetadata("ContributesBindingWithImplicitBoundType.kt")
    public void testContributesBindingWithImplicitBoundType() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesBindingWithImplicitBoundType.kt");
    }

    @Test
    @TestMetadata("ContributesBindingWithImplicitBoundType_AdditionalScope.kt")
    public void testContributesBindingWithImplicitBoundType_AdditionalScope() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesBindingWithImplicitBoundType_AdditionalScope.kt");
    }

    @Test
    @TestMetadata("ContributesBindingWithImplicitBoundType_FromAnotherModule.kt")
    public void testContributesBindingWithImplicitBoundType_FromAnotherModule() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesBindingWithImplicitBoundType_FromAnotherModule.kt");
    }

    @Test
    @TestMetadata("ContributesBindingWithImplicitBoundType_Object.kt")
    public void testContributesBindingWithImplicitBoundType_Object() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesBindingWithImplicitBoundType_Object.kt");
    }

    @Test
    @TestMetadata("ContributesBindingWithImplicitQualifiedBoundType.kt")
    public void testContributesBindingWithImplicitQualifiedBoundType() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesBindingWithImplicitQualifiedBoundType.kt");
    }

    @Test
    @TestMetadata("ContributesBindingWithMultipleBoundTypes.kt")
    public void testContributesBindingWithMultipleBoundTypes() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesBindingWithMultipleBoundTypes.kt");
    }

    @Test
    @TestMetadata("ContributesBindingWithSpecificBoundType.kt")
    public void testContributesBindingWithSpecificBoundType() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesBindingWithSpecificBoundType.kt");
    }

    @Test
    @TestMetadata("ContributesBindingWithSpecificQualifiedBoundType.kt")
    public void testContributesBindingWithSpecificQualifiedBoundType() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesBindingWithSpecificQualifiedBoundType.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/member")
  @TestDataPath("$PROJECT_ROOT")
  public class Member {
    @Test
    public void testAllFilesPresentInMember() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/member"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("FieldInjectFactory.kt")
    public void testFieldInjectFactory() {
      runTest("compiler-tests/src/test/data/box/member/FieldInjectFactory.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/provides")
  @TestDataPath("$PROJECT_ROOT")
  public class Provides {
    @Test
    public void testAllFilesPresentInProvides() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/provides"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("SimpleFunctionProvider.kt")
    public void testSimpleFunctionProvider() {
      runTest("compiler-tests/src/test/data/box/provides/SimpleFunctionProvider.kt");
    }
  }
}
